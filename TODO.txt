Phase I - Requirements Analysis & Prototyping 
====

Best Practices
===

* Leverage Social Media API's where feasible 

* Utilize JSON as default data type to pull data from Social media provider API's 



Functional Prototypes
====

* Pastebin: working prototype -
rewrite of scraper adding Python multiprocessor functionality to distribute work load across multiple CPU's 

* Twitter: working prototype -
Add Python Multiprocessor functionality to distribute work load across multiple CPU's 

Etymology
===

* Social Networks - Micro - Messo - Macro -> http://en.wikipedia.org/wiki/Social_Networks

* Proactive Cyber Defense -> http://en.wikipedia.org/wiki/Proactive_Cyber_Defence

* Anthropological Analysis Anonymous => http://surprisinglyfree.com/2012/03/13/gabriella-coleman/

* DarkNet => http://en.wikipedia.org/wiki/Darknet_(file_sharing)

* TorWeb => http://www.wired.com/threatlevel/2011/06/silkroad/

* Apache Hadoop - http://en.wikipedia.org/wiki/Hadoop

* Apache Mahout - http://en.wikipedia.org/wiki/Apache_Mahout

* Apache Solr - http://en.wikipedia.org/wiki/Apache_Solr

* AI - http://en.wikipedia.org/wiki/Artificial_intelligence

* NLP - http://en.wikipedia.org/wiki/Natural_language_processing

* ML - http://en.wikipedia.org/wiki/Machine_learning

* Neural Networks - http://en.wikipedia.org/wiki/Artificial_neural_network

* Time Series Prediction - http://en.wikipedia.org/wiki/Time_series_prediction

* Fuzzy Logic - http://en.wikipedia.org/wiki/Fuzzy_Logic

* Probabilistic methods for uncertain reasoning - http://en.wikipedia.org/wiki/Artificial_intelligence#Probabilistic_methods_for_uncertain_reasoning

* Classifiers and statistical learning methods - http://en.wikipedia.org/wiki/Artificial_intelligence#Probabilistic_methods_for_uncertain_reasoning

Non Functional TODO
===

* Twitter - explore value if any in - http://my.safaribooksonline.com/book/-/9781449330514/hacking-twitter-social-graph-data/id3119106
Google Social graph API

* re-write of Pastbin implementation to 100% leverage the Pastebin API - JSON

* reddit - utlize the Reddit API - https://github.com/reddit/reddit/wiki/API - JSON

* facebook - will be tricky - they are a closed environment -
Facebook Graph API does utilize JSON - only use at this time may be sentiment trending topics related to CND operations 
  http://developers.facebook.com/docs/reference/api/

* DarkNet & TorWeb - Web Crawler - TorWeb may not be so difficult -
send a web crawler throug tor proxy and scrape all content for watchlist based strings of strategic value -
correlate back to the TorWeb URL. DarkNet P2P sites will be even trickier -
may require active operations to penetrate speheres of
trust to gain multi tiered authentication needed to gain access
to the darker areas of the Internet for proactive CND operations.
TorWeb Crawler will need tor + privoxy to tunnel the HTTP requests through the SOCKS protocol
Perhaps code a Python implementation to tunnel HTTP through SOCKS

* Spiders/Crawlers to data mine the public P2P networks -
searching for drops from Active CNA/CNE Operations - proactively hunting the hunters 

* Natural Language Processing -
exploring feasibility of leveraging Google Translate API to data mine foreign Social Media Sites -
integration with Baidu API. Target Chinese and Russian Social Media sites via their API's -
leverage Google Translate API to translate the JSON based dumps -
monitor in real time for any activity proactively toward a more effective CND strategy. 

* Hadoop and Hadoop EcoSystem -
explore creation of AI/NLP/ML programming logic to be leveraged by Hadoop and Mahout and Solr.
Utilize HBase Hadoop database to enrich and add attributes to data -
incorporate Hive, and utilize Zookeeper for jobtracking.
Functionality of this are of the software architecture will be to conduct advance AI/NLP/ML CND Analytics
Hadoop Thrift API - language angnostic
http://wiki.apache.org/hadoop/Hbase/ThriftApi

* Machine Learning for Hackers - http://my.safaribooksonline.com/book/-/9781449330514

* Exploratory of utilization of RabbitMQ within Hadoop architecture -
Flume AMQP
https://github.com/stampy88/flume-amqp-plugin
RabbitMQ DevTools
http://www.rabbitmq.com/devtools.html

* Python Machine Learning ToolKit
http://packages.python.org/milk/

* Python Pandas - Python Data Analysis Library
http://pandas.pydata.org/

* Python Programming Best Practices

The Zen of Python, by Tim Peters

Beautiful is better than ugly.
Explicit is better than implicit.
Simple is better than complex.
Complex is better than complicated.
Flat is better than nested.
Sparse is better than dense.
Readability counts.
Special cases aren't special enough to break the rules.
Although practicality beats purity.
Errors should never pass silently.
Unless explicitly silenced.
In the face of ambiguity, refuse the temptation to guess.
There should be one-- and preferably only one --obvious way to do it.
Although that way may not be obvious at first unless you're Dutch.
Now is better than never.
Although never is often better than *right* now.
If the implementation is hard to explain, it's a bad idea.
If the implementation is easy to explain, it may be a good idea.
Namespaces are one honking great idea -- let's do more of those!
 
